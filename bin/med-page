#!/usr/bin/env node

var os = require('os')
var path = require('path')
var fs = require('fs-extra')
var exists = fs.existsSync
var program = require('./med')
var render = require('consolidate').handlebars.render
var download = require('download-git-repo')
var chalk = require("chalk");
var less = require("less");

var pageFolder = path.resolve('./pages');
var source = path.resolve(__dirname + '/../source/page'),
    dest;

program
    .option('-t, --type <view>', '视图类型')
    .action(function(name, opts) {
        dest = path.resolve("./pages/" + name);

        switch (opts.type) {
            case 'bind':
                run(name, opts.type);
                break;
            case 'list':
                run(name, 'list');
                break;
            default:
                run(name, 'page');
                break;
        }
    });
program.parse(process.argv);

console.log()
process.on('exit', function() {
    console.log()
})

if (typeof(Date.prototype.format) === "undefined") {
    Date.prototype.format = function(format) {
        var date = {
            "M+": this.getMonth() + 1,
            "d+": this.getDate(),
            "h+": this.getHours(),
            "m+": this.getMinutes(),
            "s+": this.getSeconds(),
            "q+": Math.floor((this.getMonth() + 3) / 3),
            "S+": this.getMilliseconds()
        };
        if (/(y+)/i.test(format)) {
            format = format.replace(RegExp.$1, (this.getFullYear() + '')
                .substr(4 - RegExp.$1.length));
        }
        for (var k in date) {
            if (new RegExp("(" + k + ")")
                .test(format)) {
                format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? date[k] : ("00" + date[k])
                    .substr(("" + date[k]).length));
            }
        }
        return format;
    }
}


/**
 * [noop description]
 * @return {[type]} [description]
 */
function noop() {
    return false;
}

function run(name, type) {
    create(name, type);
}

/**
 * 创建页面文件
 * @return {[type]} [description]
 */
function create(name, type) {
    if (!exists(pageFolder)) {
        console.error(chalk.yellow('创建 pages 文件夹'));
    }

    var typeFolder = type || 'page';

    // return console.log("dest: ", dest, name, typeFolder);
    fs.copy(path.resolve(source, typeFolder), dest, function(err) {
        fs.move(path.resolve(dest, "index.js"), path.resolve(dest, name + '.js'), {
            overwrite: true
        }, function() {
            parse(path.resolve(dest, name + '.js'), name);
        })

        fs.move(path.resolve(dest, "_style.less"), path.resolve(dest, 'style.less'), {
            overwrite: true
        }, function() {
            // less 编译

        });

        var htmlFile = path.resolve(name + ".html")
        fs.copySync(path.resolve(source, 'page.html'), htmlFile);
        parse(htmlFile, name)

        console.info(chalk.green("完成新建页面: " + name));
    });
}

/**
 * 渲染部分模板
 * @param  {string} file 文件路径
 * @return {[type]}      [description]
 */
function parse(file, name) {
    var str = fs.readFileSync(file, 'utf8');

    // outputFileSync
    if (str) {
        render(str, {
            name: name,
            date: new Date().format("yyyy-MM-dd hh:mm"),
            view: 'BaseView'
        }, function(err, res) {
            if (!err) {
                fs.outputFileSync(file, res);
            } else {
                console.log(chalk.red(err));
            }
        })
    }
}